---
title: Questões da OBA
subtitle: Exercite seus conhecimentos em Astronomia com questões da Olimpíada Brasileira de Astronomia.
image: h5p_oba_logo.jpeg
format:
    html:
        include-in-header:
            text: |
                <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>                                              
                <style>
                    .quiz-container {
                      /* Um estilo que lembra um “card” */
                      border: 1px solid #ccc;
                      border-radius: 4px;
                      background-color: #fff;
                      padding: 1rem 1.5rem;
                      margin-bottom: 1.5rem;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }

                    .mode-selection-quiz {
                      /* Fundo levemente cinza para destacar */
                      margin-bottom: 1rem;
                      padding: 0.5rem;
                      background-color: #f8f9fa;
                      border-radius: 4px;
                    }

                    .mode-selection-quiz label {
                      margin-right: 1rem;
                      cursor: pointer;
                    }

                    .question-display {
                      position: relative;
                      overflow: hidden;
                      min-height: 150px;
                      margin-bottom: 1rem;
                    }

                    .question-container {
                      transition: transform 0.5s ease, opacity 0.5s ease;
                      padding: 1rem;
                      border-radius: 4px;
                      background-color: #fff;
                      border: 1px solid transparent; /* Deixe “transparent” para animar melhor */
                    }

                    .slide-in-right-quiz {
                      transform: translateX(100%);
                      animation: slideInFromRight 0.5s forwards;
                    }

                    .slide-in-left-quiz {
                      transform: translateX(-100%);
                      animation: slideInFromLeft 0.5s forwards;
                    }

                    @keyframes slideInFromRight {
                      from { transform: translateX(100%); opacity: 0; }
                      to { transform: translateX(0); opacity: 1; }
                    }

                    @keyframes slideInFromLeft {
                      from { transform: translateX(-100%); opacity: 0; }
                      to { transform: translateX(0); opacity: 1; }
                    }

                    .enunciado {
                      font-size: 1.1em;
                      margin-bottom: 1rem;
                      font-weight: 500; /* um pouco mais de destaque */
                    }

                    /* Na tela larga a imagem fica à direita; em telas estreitas, ela ocupa a largura inteira */
                    .question-image {
                      max-width: 50%;
                      float: right;
                      margin: 0 0 10px 10px;
                    }
                    @media (max-width: 800px) {
                      .question-image {
                        float: none;
                        display: block;
                        max-width: 100%;
                        margin: 10px 0;
                      }
                    }

                    .alternatives {
                      margin-bottom: 1rem;
                    }

                    .alternative {
                      border: 1px solid #ddd;
                      padding: 0.75rem 1rem;
                      margin: 0;
                      margin-bottom: 0.5rem;
                      cursor: pointer;
                      border-radius: 4px;
                      transition: background-color 0.2s ease, border-color 0.2s ease;
                    }

                    /* Efeito “hover” para dar feedback ao usuário */
                    .alternative:hover {
                      background-color: #f1f1f1;
                    }

                    /* Quando selecionada */
                    .alternative.selected {
                      background-color: #cce5ff;
                      border-color: #b8daff;
                    }

                    .nav-buttons-quiz {
                      display: flex;
                      justify-content: space-between;
                      margin-bottom: 1rem;
                    }

                    /* Estilize os botões de navegação de modo semelhante a botões “secondary” do Bootstrap */
                    .nav-buttons-quiz button {
                      padding: 0.5rem 1rem;
                      border-radius: 4px;
                      border: 1px solid #ccc;
                      background-color: #f8f9fa;
                      cursor: pointer;
                      transition: background-color 0.2s ease;
                    }

                    .nav-buttons-quiz button:hover:not(:disabled) {
                      background-color: #e2e6ea;
                    }

                    .nav-buttons-quiz button:disabled {
                      opacity: 0.6;
                      cursor: not-allowed;
                    }

                    /* Barra de progresso textual */
                    .progress-info {
                      margin-bottom: 1rem;
                      font-size: 0.9rem;
                      color: #555;
                    }

                    .finalization {
                      text-align: center;
                      margin-top: 2rem;
                      padding: 1rem;
                      border-top: 1px solid #ccc;
                      background-color: #f8f9fa;
                      border-radius: 0 0 4px 4px;
                    }

                    .final-message {
                      font-weight: 500;
                      margin-bottom: 1rem;
                    }

                    .retry-btn {
                      padding: 0.5rem 1rem;
                      border-radius: 4px;
                      border: 1px solid #ccc;
                      background-color: #fff;
                      cursor: pointer;
                      transition: background-color 0.2s ease;
                    }

                    .retry-btn:hover {
                      background-color: #e2e6ea;
                    }

                    /* Caso deseje realçar mensagens de acerto/erro/partial usando classes no statusDiv */
                    .status-correct {
                      background-color: #d4edda;  /* verde claro */
                      color: #155724;
                      border: 1px solid #c3e6cb;
                      border-radius: 4px;
                      padding: 0.5rem;
                      margin-bottom: 1rem;
                    }

                    .status-partial {
                      background-color: #fff3cd;  /* amarelo claro */
                      color: #856404;
                      border: 1px solid #ffeeba;
                      border-radius: 4px;
                      padding: 0.5rem;
                      margin-bottom: 1rem;
                    }

                    .status-incorrect {
                      background-color: #f8d7da;  /* rosa claro */
                      color: #721c24;
                      border: 1px solid #f5c6cb;
                      border-radius: 4px;
                      padding: 0.5rem;
                      margin-bottom: 1rem;
                    }
                </style>
---

Todas as questões contidas nesta página foram obtidas sem qualquer modificação de conteúdo dos questionários da [Olimpíada Brasileira de Astronomia e Astronáutica (OBA).](http://www.oba.org.br/site/?p=conteudo&idcat=9&pag=conteudo)

```{=html}
  
  <div id="quizzes"></div>

  <script>
        /* 
      A função gen_questionario recebe o caminho do arquivo de questões e o título do questionário.
      Cada questionário é gerado dentro de um <details> (colapsável) e opera de forma independente.
    */
    function gen_questionario(arquivoQuestoes, titulo) {
      // Cria o container colapsável usando <details>
      var details = document.createElement("details");
      details.style.marginBottom = "20px";
      var summary = document.createElement("summary");
      summary.textContent = titulo;
      summary.style.cursor = "pointer";
      details.appendChild(summary);
      
      var container = document.createElement("div");
      container.className = "quiz-container";
      details.appendChild(container);
      
      document.getElementById("quizzes").appendChild(details);
      
      // Variáveis do questionário
      var questions = [];
      var currentQuestionIndex = 0;
      var questionStates = [];
      var mode = "sequential"; // ou "random"
      var quizStarted = false;
      
      // Opções de visualização
      var modeDiv = document.createElement("div");
      modeDiv.className = "mode-selection-quiz";
      modeDiv.innerHTML = `
        <label><input type="radio" name="mode_${titulo}" value="sequential" checked> Modo sequencial</label>
        <label style="margin-left:20px;"><input type="radio" name="mode_${titulo}" value="random"> Modo aleatório</label>
      `;
      container.appendChild(modeDiv);
      
      var modeInputs = modeDiv.querySelectorAll(`input[name="mode_${titulo}"]`);
      modeInputs.forEach(input => {
        input.addEventListener("change", function() {
          if (quizStarted) {
            if (!confirm("O questionário será reinicializado e tudo que foi feito até então será apagado. Deseja continuar?")) {
              modeInputs.forEach(inp => {
                if (inp.value === mode) inp.checked = true;
              });
              return;
            }
            resetQuiz();
          }
          mode = this.value;
          if (mode === "random") {
            questions = shuffleArray(questions);
          } else {
            questions = questions.sort((a, b) => a.originalIndex - b.originalIndex);
          }
          resetQuiz();
        });
      });
      
      var questionDisplay = document.createElement("div");
      questionDisplay.className = "question-display";
      container.appendChild(questionDisplay);
      
      var progressInfo = document.createElement("div");
      progressInfo.className = "progress-info";
      container.appendChild(progressInfo);
      
      var navDiv = document.createElement("div");
      navDiv.className = "nav-buttons-quiz";
      navDiv.innerHTML = `
        <button class="prev-btn" disabled>Anterior</button>
        <button class="verify-btn" disabled>Verificar</button>
        <button class="next-btn" disabled>Próxima</button>
      `;
      container.appendChild(navDiv);
      
      var showCorrectBtn = document.createElement("button");
      showCorrectBtn.className = "show-correct-btn";
      showCorrectBtn.textContent = "Mostrar Alternativas Corretas";
      showCorrectBtn.disabled = true;
      container.appendChild(showCorrectBtn);
      
      var finalDiv = document.createElement("div");
      finalDiv.className = "finalization";
      finalDiv.style.display = "none";
      finalDiv.innerHTML = `
        <div class="final-message"></div>
        <button class="retry-btn">Tentar novamente</button>
      `;
      container.appendChild(finalDiv);
      
      // Carrega e parseia o arquivo de questões
      fetch(arquivoQuestoes)
        .then(response => response.text())
        .then(text => {
          questions = parseQuestions(text);
          questions.forEach((q, idx) => { q.originalIndex = idx; });
          // Inicializa os estados usando um objeto para armazenar a seleção por alternativa (id)
          // Ao inicializar o estado de cada questão (na função que faz o reset):
          questionStates = questions.map(q => {
            var sel = {};
            q.alternatives.forEach(alt => { sel[alt.id] = false; });
            return { selected: sel, verified: false, score: 0, correctShown: false, order: null };
          });
          if (mode === "random") questions = shuffleArray(questions);
          quizStarted = false;
          currentQuestionIndex = 0;
          renderQuestion();
          updateProgress();
        });
      
      // Parse do arquivo de questões – agora atribuindo um id para cada alternativa
      function parseQuestions(text) {
        var qs = [];
        // Separa cada questão (delimitada por ---)
        var parts = text.split('---').map(s => s.trim()).filter(s => s.length > 0);
        parts.forEach(part => {
          var lines = part.split('\n').map(l => l.trim()).filter(l => l.length > 0);
          var q = { alternatives: [] };
          // Itera sobre as linhas usando um índice para permitir pulos
          for (var i = 0; i < lines.length; i++) {
            var line = lines[i];
            if (line.startsWith("tipo:")) {
              q.tipo = line.substring(5).trim();
            } else if (line.startsWith("fig:")) {
              q.fig = line.substring(4).trim();
            } else if (line.startsWith("enunciado:")) {
              // Começa a extrair o enunciado
              var enunciado = "<p>" + line.substring(10).trim() + "</p>";
              // Enquanto as próximas linhas não iniciem com "-" (alternativas) nem com outros campos
              i++;
              while (i < lines.length &&
                    !lines[i].startsWith("-") &&
                    !lines[i].startsWith("pontuacao:") &&
                    !lines[i].startsWith("tipo:") &&
                    !lines[i].startsWith("fig:")) {
                //enunciado += "\n" + lines[i];
                enunciado += "<p>" + lines[i] + "</p>";
                i++;
              }
              // Converte as quebras de linha em <br> para renderização correta em HTML
              //q.enunciado = enunciado.replace(/\n/g, "<br><br>");
              q.enunciado = enunciado
              i--; // retrocede para reprocessar a linha que quebrou o loop
            } else if (line.startsWith("pontuacao:")) {
              var scoringStr = line.substring(11).trim();
              q.scoring = [];
              var regex = /\[([X0]+),([\d.]+)\]/g;
              var match;
              while ((match = regex.exec(scoringStr)) !== null) {
                q.scoring.push({ pattern: match[1], score: parseFloat(match[2]) });
              }
            } else if (line.startsWith("-")) {
              // Trata as alternativas – em singlechoice, se iniciar com "X" indica a correta
              var altText = line.substring(1).trim();
              var isCorrect = false;
              if (q.tipo === "singlechoice" && altText.startsWith("X")) {
                isCorrect = true;
                altText = altText.substring(1).trim();
              }
              // Atribui um id com base no número atual de alternativas
              q.alternatives.push({ id: q.alternatives.length, text: altText, isCorrect: isCorrect });
            }
          }
          qs.push(q);
        });
        return qs;
      }


      
      // Função auxiliar para embaralhar um array
      function shuffleArray(array) {
        let arr = array.slice();
        for (let i = arr.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [arr[i], arr[j]] = [arr[j], arr[i]];
        }
        return arr;
      }
      
      // Renderiza a questão atual, embaralhando as alternativas sempre
      function renderQuestion(direction) {
        var q = questions[currentQuestionIndex];
        var state = questionStates[currentQuestionIndex];
        questionDisplay.innerHTML = "";
        var qContainer = document.createElement("div");
        qContainer.className = "question-container";
        if (direction === "next") {
          qContainer.classList.add("slide-in-right-quiz");
        } else if (direction === "prev") {
          qContainer.classList.add("slide-in-left-quiz");
        }
        // Exibe o enunciado
        var enunciadoDiv = document.createElement("div");
        enunciadoDiv.className = "enunciado";
        enunciadoDiv.innerHTML = q.enunciado;
        qContainer.appendChild(enunciadoDiv);
        // Imagem, se houver
        if (q.fig) {
          var img = document.createElement("img");
          img.src = q.fig;
          img.alt = "Figura da questão";
          img.className = "question-image";
          qContainer.appendChild(img);
        }
        // Status (se já verificada)
        var statusDiv = document.createElement("div");
        statusDiv.className = "status";
        if (state.verified) {
          if (state.score === 1) {
            statusDiv.textContent = "Parabéns, você acertou esta questão!";
            statusDiv.classList.add("status-correct");
          } else if (state.score > 0) {
            statusDiv.textContent = "Quase, você obteve " + state.score + " pontos nesta questão.";
            statusDiv.classList.add("status-partial");
          } else {
            statusDiv.textContent = "Resposta errada: 0 pontos nesta questão.";
            statusDiv.classList.add("status-incorrect");
          }
        }
        qContainer.appendChild(statusDiv);
        
        // Aqui verificamos se já existe uma ordem definida para essa questão;
        // se não, embaralhamos uma vez e salvamos no estado.
        if (!state.order) {
          state.order = shuffleArray(q.alternatives.slice());
        }
        var alternativesOrder = state.order;
        
        // Renderiza as alternativas conforme a ordem armazenada
        var alternativesDiv = document.createElement("div");
        alternativesDiv.className = "alternatives";
        alternativesOrder.forEach(alt => {
          var altDiv = document.createElement("div");
          altDiv.className = "alternative";
          altDiv.textContent = alt.text;
          if (state.selected[alt.id]) altDiv.classList.add("selected");
          if (!state.verified) {
            altDiv.addEventListener("click", function() {
              handleAlternativeClick(alt.id);
            });
          }
          alternativesDiv.appendChild(altDiv);
        });
        qContainer.appendChild(alternativesDiv);
        
        // Altera a cor de fundo se a questão já foi verificada
        if (state.verified) {
          if (state.score === 1) {
            qContainer.style.backgroundColor = "#d4edda";
          } else if (state.score > 0) {
            qContainer.style.backgroundColor = "#fff3cd";
          } else {
            qContainer.style.backgroundColor = "#f8d7da";
          }
        }
        questionDisplay.appendChild(qContainer);
        updateNavButtons();
        updateVerifyButton();
        if (state.verified && !state.correctShown) {
          showCorrectBtn.disabled = false;
        } else {
          showCorrectBtn.disabled = true;
        }
        MathJax.typeset(); // Reprocessa as equações
      }

      
      // Trata clique na alternativa – agora passando o id da alternativa
      function handleAlternativeClick(altId) {
        var q = questions[currentQuestionIndex];
        var state = questionStates[currentQuestionIndex];
        if (state.verified) return;
        if (q.tipo === "singlechoice") {
          Object.keys(state.selected).forEach(key => {
            state.selected[key] = (parseInt(key) === altId);
          });
        } else {
          state.selected[altId] = !state.selected[altId];
        }
        quizStarted = true;
        renderQuestion();
        updateVerifyButton();
      }
      
      function updateVerifyButton() {
        var state = questionStates[currentQuestionIndex];
        var verifyBtn = navDiv.querySelector(".verify-btn");
        // Se alguma alternativa estiver selecionada, habilita o botão
        if (!state.verified && Object.values(state.selected).some(s => s)) {
          verifyBtn.disabled = false;
        } else {
          verifyBtn.disabled = true;
        }
      }
      
      function updateNavButtons() {
        var prevBtn = navDiv.querySelector(".prev-btn");
        var nextBtn = navDiv.querySelector(".next-btn");
        prevBtn.disabled = (currentQuestionIndex === 0);
        nextBtn.disabled = (currentQuestionIndex === questions.length - 1);
      }
      
      // Atualiza as barras de progresso e os textos
      function updateProgress() {
        var evaluatedCount = questionStates.filter(s => s.verified).length;
        var totalQuestions = questions.length;
        var totalScore = questionStates.reduce((sum, s) => sum + s.score, 0);
        progressInfo.innerHTML = `
          <div>
            Questão ${currentQuestionIndex + 1} de ${totalQuestions}.
            <br>
            <progress value="${currentQuestionIndex + 1}" max="${totalQuestions}" style="width: 100%;"></progress>
          </div>
          <div style="margin-top: 1rem;">
            ${evaluatedCount} de ${totalQuestions} questões avaliadas.
            <br>
            <progress value="${evaluatedCount}" max="${totalQuestions}" style="width: 100%;"></progress>
          </div>
          <div style="margin-top: 1rem;">
            Pontuação: ${totalScore.toFixed(1)} de ${totalQuestions}.
            <br>
            <progress value="${totalScore}" max="${totalQuestions}" style="width: 100%;"></progress>
          </div>
        `;
        if (evaluatedCount === totalQuestions) {
          finalDiv.style.display = "block";
          var percentage = (totalScore / totalQuestions) * 100;
          var finalMsg = "";
          if (totalScore === totalQuestions) {
            finalMsg = "Parabéns, você acertou tudo!";
          } else if (percentage >= 50) {
            finalMsg = percentage.toFixed(0) + "% de acerto. Está quase. Continue estudando.";
          } else {
            finalMsg = percentage.toFixed(0) + "% de acerto. Continue estudando.";
          }
          finalDiv.querySelector(".final-message").textContent = finalMsg;
        } else {
          finalDiv.style.display = "none";
        }
      }
      
      navDiv.querySelector(".prev-btn").addEventListener("click", function() {
        if (currentQuestionIndex > 0) {
          currentQuestionIndex--;
          renderQuestion("prev");
          updateProgress();
        }
      });
      navDiv.querySelector(".next-btn").addEventListener("click", function() {
        if (currentQuestionIndex < questions.length - 1) {
          currentQuestionIndex++;
          renderQuestion("next");
          updateProgress();
        }
      });
      
      navDiv.querySelector(".verify-btn").addEventListener("click", function() {
        var state = questionStates[currentQuestionIndex];
        if (state.verified) return;
        var q = questions[currentQuestionIndex];
        // Monta o padrão na ordem original (ordenada pelo id)
        var sortedAlternatives = q.alternatives.slice().sort((a, b) => a.id - b.id);
        var userPattern = sortedAlternatives.map(alt => state.selected[alt.id] ? "X" : "0").join("");
        var score = 0;
        if (q.tipo === "singlechoice") {
          // Encontra o id selecionado e compara com a alternativa correta
          var selectedId = Object.keys(state.selected).find(key => state.selected[key]);
          var altObj = q.alternatives.find(alt => alt.id == selectedId);
          if (altObj && altObj.isCorrect) score = 1;
        } else {
          if (q.scoring && q.scoring.length > 0) {
            q.scoring.forEach(rule => {
              if (rule.pattern === userPattern) {
                score = Math.max(score, rule.score);
              }
            });
          }
        }
        state.verified = true;
        state.score = score;
        renderQuestion();
        updateProgress();
      });
      
      showCorrectBtn.addEventListener("click", function() {
        var state = questionStates[currentQuestionIndex];
        if (!state.verified || state.correctShown) return;
        var q = questions[currentQuestionIndex];
        var alternativesDiv = questionDisplay.querySelector(".alternatives");
        
        if (q.tipo === "singlechoice") {
          // Itera sobre a ordem embaralhada armazenada no estado.
          Array.from(alternativesDiv.children).forEach((altDiv, idx) => {
            var altObj = state.order[idx];
            if (altObj.isCorrect) {
              altDiv.style.color = "green";
            }
          });
        } else {
          // Para multichoice, encontramos a regra de pontuação que concede 1 ponto.
          var correctPattern = null;
          if (q.scoring) {
            var fullRule = q.scoring.find(rule => rule.score === 1);
            if (fullRule) {
              correctPattern = fullRule.pattern;
            }
          }
          if (correctPattern) {
            // Obtém a ordem original das alternativas (ordenadas pelo id)
            var sortedAlts = q.alternatives.slice().sort((a, b) => a.id - b.id);
            // Para cada alternativa exibida na ordem embaralhada, buscamos sua posição original.
            Array.from(alternativesDiv.children).forEach((altDiv, idx) => {
              var displayedAlt = state.order[idx];
              // Encontra o índice original da alternativa
              var originalIndex = sortedAlts.findIndex(a => a.id === displayedAlt.id);
              if (originalIndex !== -1 && correctPattern[originalIndex] === "X") {
                altDiv.style.color = "green";
              }
            });
          }
        }
        
        state.correctShown = true;
        showCorrectBtn.disabled = true;
      });

      
      finalDiv.querySelector(".retry-btn").addEventListener("click", function() {
        resetQuiz();
      });
      
      function resetQuiz() {
        quizStarted = false;
        currentQuestionIndex = 0;
        questionStates = questions.map(q => {
          var sel = {};
          q.alternatives.forEach(alt => { sel[alt.id] = false; });
          return { selected: sel, verified: false, score: 0, correctShown: false };
        });
        renderQuestion();
        updateProgress();        
      }
    }
    
    // Chama a função para gerar cada questionário
    //gen_questionario("/h5p/questionario1.txt", "27ª OBA - Nível 1");
    gen_questionario("/oba/27OBA-Nivel1/27OBA-Nivel1.txt", "27ª OBA - Nível 1");    
    gen_questionario("/oba/27OBA-Nivel2/27OBA-Nivel2.txt", "27ª OBA - Nível 2");    
    gen_questionario("/oba/27OBA-Nivel3/27OBA-Nivel3.txt", "27ª OBA - Nível 3");    
    gen_questionario("/oba/27OBA-Nivel4/27OBA-Nivel4.txt", "27ª OBA - Nível 4");    
  </script>
```

